name: Node.js CI/CD to Cloud Run

on:
  push:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  REPO: node-api-repo
  SERVICE: node-api-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image name
        id: set-image
        run: |
          echo "IMAGE_NAME=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO }}/node-api:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_NAME_LATEST=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO }}/node-api:latest" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Update Vulnerable Package
        run: |
          npm install cross-spawn@7.0.6 --force
          npm install
        
      - name: Run Linter
        run: npm run lint

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Scan with Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype ${{ env.IMAGE_NAME }} \
            --only-fixed \
            --fail-on high \
            --scope all-layers \
            --output table

      - name: Push to Artifact Registry
        run: |
          docker push ${{ env.IMAGE_NAME }}
          docker push ${{ env.IMAGE_NAME_LATEST }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE }} \
            --image ${{ env.IMAGE_NAME }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --min-instances=0 \
            --max-instances=1 \
            --update-env-vars PORT=8080
            
      - name: Clean up credentials
        run: |
          rm -f ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
          rm -f gha-creds-*.json
        if: always()